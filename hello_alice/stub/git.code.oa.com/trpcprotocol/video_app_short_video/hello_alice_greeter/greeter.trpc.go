// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: greeter.proto

package hello_alice_greeter

import (
	"context"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	_ "git.code.oa.com/trpc-go/trpc-go/http"

	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

/* ************************************ Service Definition ************************************ */

// GreeterService defines service
type GreeterService interface {
	SayHello(ctx context.Context, req *HelloRequest, rsp *HelloReply) (err error) // 测试天机阁
	// rpc TestTjg(TestTjgReq) returns (TestTjgRsp);
	// 测试tconf
	// rpc TestTconf(TestTconfReq) returns (TestTconfRsp);
}

func GreeterService_SayHello_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &HelloRequest{}
	rsp := &HelloReply{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GreeterService).SayHello(ctx, reqbody.(*HelloRequest), rspbody.(*HelloReply))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// GreeterServer_ServiceDesc descriptor for server.RegisterService
var GreeterServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.video_app_short_video.hello_alice.Greeter",
	HandlerType: ((*GreeterService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.video_app_short_video.hello_alice.Greeter/SayHello",
			Func: GreeterService_SayHello_Handler,
		},
	},
}

// RegisterGreeterService register service
func RegisterGreeterService(s server.Service, svr GreeterService) {
	if err := s.Register(&GreeterServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Greeter register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// GreeterClientProxy defines service client proxy
type GreeterClientProxy interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (rsp *HelloReply, err error) // 测试天机阁
	// rpc TestTjg(TestTjgReq) returns (TestTjgRsp);
	// 测试tconf
	// rpc TestTconf(TestTconfReq) returns (TestTconfRsp);
}

type GreeterClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewGreeterClientProxy = func(opts ...client.Option) GreeterClientProxy {
	return &GreeterClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *GreeterClientProxyImpl) SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (rsp *HelloReply, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.video_app_short_video.hello_alice.Greeter/SayHello")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("video_app_short_video")
	msg.WithCalleeServer("hello_alice")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("SayHello")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp = &HelloReply{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}
	codec.PutBackMessage(msg)

	return rsp, nil
}
